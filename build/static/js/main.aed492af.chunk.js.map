{"version":3,"sources":["state/index.js","state/types.js","components/ToDoForm.jsx","components/ToDoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["initialState","tasks","types","FETCH_TODOS","ADD_TASK","DELETE_TASK","TOGGLE_TASK","ToDoForm","dispatch","useState","value","setValue","onSubmit","e","preventDefault","type","payload","task","title","completed","id","onChange","target","className","ToDoList","map","toggledClass","key","onClick","toggleTask","deleteTask","setTasksInLocalStorage","localStorage","setItem","JSON","stringify","getTasks","getItem","parse","reducer","state","action","tasksFromLocalStorage","updatedTasks","addTask","filter","App","useReducer","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aed492af.chunk.js","sourcesContent":["export const initialState = {\n  tasks: [],\n};\n\nexport default initialState;\n","export const types = {\n  FETCH_TODOS: 'FETCH_TODOS',\n  ADD_TASK: 'ADD_TASK',\n  DELETE_TASK: 'DELETE_TASK',\n  TOGGLE_TASK: 'TOGGLE_TASK',\n};\n\nexport default types;\n","import React, { useState } from 'react';\nimport types from '../state/types';\n\nimport './ToDoForm.css';\n\nconst rootClass = 'to-do-form';\n\nfunction ToDoForm({ dispatch }) {\n  const [value, setValue] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (value) {\n    const newTask = { title: value, completed: false, id: value };\n    dispatch({ type: types.ADD_TASK, payload: { task: newTask } });\n    setValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n      <input className={`${rootClass}__btn`} type=\"submit\" value=\"Create Task\"/>\n    </form>\n  );\n}\n\nexport default ToDoForm;\n","import React from 'react';\nimport types from '../state/types';\n\nimport './ToDoList.css';\n\nconst rootClass = 'to-do-list';\n\nfunction ToDoList({ tasks, dispatch }) {\n\n  function deleteTask(id) {\n    return dispatch({ type: types.DELETE_TASK, payload: { id } });\n  }\n\n  function toggleTask(id) {\n    dispatch({ type: types.TOGGLE_TASK, payload: { id } });\n  }\n\n  return (\n    <ul>\n      {tasks.map(({ title, id, completed }) => {\n        const toggledClass = completed ?\n          `${rootClass}__completed` : `${rootClass}__not-completed`;\n\n        return (\n          <li className={`${rootClass}__task`} key={title}>\n            <span className={toggledClass}>{ title }</span>\n            <button\n              className={`${rootClass}__toggle-btn`}\n              onClick={() => toggleTask(id)}\n            >\n              Toggle\n            </button>\n            <button\n              className={`${rootClass}__delete-btn`}\n              onClick={() => deleteTask(id)}\n            >\n              ðŸ—‘\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default ToDoList;\n","import React, { useEffect, useReducer } from 'react';\nimport initialState from './state';\nimport types from './state/types.js'\n\n// Components\nimport ToDoForm from './components/ToDoForm';\nimport ToDoList from './components/ToDoList';\n\nimport './App.css';\n\nconst rootClass = 'app';\n\nfunction setTasksInLocalStorage(tasks) {\n  localStorage.setItem('tasks', JSON.stringify(tasks));\n}\n\nfunction getTasks() {\n  const tasksFromLocalStorage = localStorage.getItem('tasks');\n  if (!tasksFromLocalStorage) {\n      return localStorage.setItem(\n        'tasks',\n        JSON.stringify([]),\n      );\n    } else {\n      return JSON.parse(localStorage.getItem('tasks'));\n    }\n}\n\nfunction addTask(task) {\n  const tasksFromLocalStorage = JSON.parse(localStorage.getItem('tasks'));\n  const updatedTasks = [...tasksFromLocalStorage, task];\n  localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n}\n\nfunction deleteTask(id) {\n  const tasks = getTasks();\n  const updatedTasks = tasks.filter(task => task.id !== id);\n  setTasksInLocalStorage(updatedTasks);\n}\n\nfunction toggleTask(id) {\n  const tasks = getTasks();\n\n  const updatedTasks = tasks.map(task => {\n    if (task.id === id) {\n      return { ...task, completed: !task.completed };\n    }\n    return task;\n  });\n  setTasksInLocalStorage(updatedTasks);\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case types.FETCH_TODOS:\n      getTasks();\n      return {\n        ...state,\n        tasks: getTasks(),\n      };\n    case types.ADD_TASK:\n      addTask(action.payload.task);\n      return {\n        ...state,\n        tasks: getTasks(),\n      }\n    case types.DELETE_TASK:\n      deleteTask(action.payload.id);\n      return {\n        ...state,\n        tasks: getTasks(),\n      };\n    case types.TOGGLE_TASK:\n      toggleTask(action.payload.id);\n      return {\n        ...state,\n        tasks: getTasks(),\n      };\n    default:\n      return state;\n  }\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const { tasks } = state;\n\n  useEffect(() => {\n    dispatch({ type: types.FETCH_TODOS });\n  }, []);\n\n  return (\n    <div className={`${rootClass}__container`}>\n      <h3 className={`${rootClass}__title`}>to-do</h3>\n      <ToDoList tasks={tasks} dispatch={dispatch} />\n      <ToDoForm dispatch={dispatch} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}